package {{package}}

import com.twitter.finagle.{
  Filter => _,
  Service => _,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.RichServerParam
{{^hasParent}}
import com.twitter.io.Buf
{{/hasParent}}
import com.twitter.util.Future
import org.apache.thrift.protocol._
{{^hasParent}}
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
{{/hasParent}}

{{docstring}}
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class {{ServiceName}}$FinagleService(
  iface: {{ServiceName}}[Future],
  serverParam: RichServerParam
) extends {{finagleServiceParent}}{{#hasParent}}(iface, serverParam){{/hasParent}} {
{{#hasMethodServices}}
  import {{ServiceName}}._
{{/hasMethodServices}}
{{^hasMethodServices}}
{{^hasParent}}
  import {{ServiceName}}._
{{/hasParent}}
{{/hasMethodServices}}

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: {{ServiceName}}[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver = NullStatsReceiver,
    maxThriftBufferSize: Int = Thrift.param.maxThriftBufferSize,
    serviceName: String = "{{ServiceName}}"
  ) = this(iface, RichServerParam(protocolFactory, serviceName, maxThriftBufferSize, stats))

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: {{ServiceName}}[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver,
    maxThriftBufferSize: Int
  ) = this(iface, protocolFactory, stats, maxThriftBufferSize, "{{ServiceName}}")

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: {{ServiceName}}[Future],
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.param.maxThriftBufferSize)

  {{#hasParent}}override {{/hasParent}}def serviceName: String = serverParam.serviceName
{{#hasMethodServices}}
  private[this] val filters: Filter = new Filter(serverParam)
{{/hasMethodServices}}
{{^hasMethodServices}}
{{^hasParent}}
  private[this] val filters: Filter = new Filter(serverParam)
{{/hasParent}}
{{/hasMethodServices}}

{{^hasParent}}
  private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

  protected val serviceMap: _root_.scala.collection.mutable.HashMap[String, _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]] =
    new _root_.scala.collection.mutable.HashMap[String, _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]]()

  protected def addService(name: String, service: _root_.com.twitter.finagle.Service[(TProtocol, Int), Array[Byte]]): Unit = {
    serviceMap(name) = service
  }

  final def apply(request: Array[Byte]): Future[Array[Byte]] = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(request))

    try {
      val msg = iprot.readMessageBegin()
      val svcOpt = serviceMap.get(msg.name)
      if (svcOpt.isDefined) {
        svcOpt.get.apply((iprot, msg.seqid))
      } else {
        TProtocolUtil.skip(iprot, TType.STRUCT)
        invalidMethodNameFuture(msg)
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  private[this] def invalidMethodNameFuture(msg: TMessage): Future[Array[Byte]] = {
     Future.value(Buf.ByteArray.Owned.extract(
       filters.exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD,
         "Invalid method name: '" + msg.name + "'")))
  }
{{/hasParent}}
  // ---- end boilerplate.

{{#methodServices}}
  {{>methodService}}
{{/methodServices}}
}
